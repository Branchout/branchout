#!/bin/bash

set -e

preflight() {
  KUBESEC="kubesec"
  GPG_COMMAND="gpg"
  command -v gpg2 >/dev/null && GPG_COMMAND="gpg2"
  command -v yq >/dev/null || usage-secrets "yq is not installed, its needed to manipulate yaml files"
}

runGpg() {
  # shellcheck disable=SC2086
  GNUPGHOME="${BRANCHOUT_CONFIG_GPG_HOME}.${BRANCHOUT_CONFIG_GPG_KEYRING}/" ${GPG_COMMAND} ${GNUPG_DEBUG} ${GNUPG_SETTINGS} --no-default-keyring --keyring "${BRANCHOUT_CONFIG_GPG_KEYRING}.keyring" "${@}" || return $?
}

runKubesec() {
  # shellcheck disable=SC2086
  GNUPGHOME="${BRANCHOUT_CONFIG_GPG_HOME}.${BRANCHOUT_CONFIG_GPG_KEYRING}/" ${KUBESEC} ${KUBESEC_SETTINGS} ${KUBESEC_DEBUG} --keyring "${BRANCHOUT_CONFIG_GPG_KEYRING}.keyring" "${@}" || return $?
}

ensureGpgHome() {
  # shellcheck disable=SC2174
  test -d "${BRANCHOUT_CONFIG_GPG_HOME}.${BRANCHOUT_CONFIG_GPG_KEYRING}/" || mkdir -m 0700 -p "${BRANCHOUT_CONFIG_GPG_HOME}.${BRANCHOUT_CONFIG_GPG_KEYRING}/"
}

setupEd25519() {
  ensureGpgHome
  ensureConfigValue "your email address" "EMAIL"
  echo "Generating key for ${BRANCHOUT_CONFIG_EMAIL}"
  runGpg --quick-gen-key "${BRANCHOUT_CONFIG_EMAIL}" ed25519
}

setupRsa4096() {
  ensureGpgHome
  ensureConfigValue "your email address" "EMAIL"
  if runGpg --list-keys "${BRANCHOUT_CONFIG_EMAIL}" 2>/dev/null 1>/dev/null; then
    secretsSetupView
    
  else
    echo "Generating key for ${BRANCHOUT_CONFIG_EMAIL}"
    runGpg --quick-gen-key "${BRANCHOUT_CONFIG_EMAIL}" rsa4096
    secretsUseKey "${BRANCHOUT_CONFIG_EMAIL}"
  fi
}

secretsUseKey() {
  ensureGpgHome
  fingerPrint=$(runGpg --with-colons --list-secret-keys "${1}" | awk -F: '$1 == "fpr" {print $10; exit}')
  branchout set-config "GPG_KEY" "${fingerPrint}"
  echo "default-key ${fingerPrint}" > "${BRANCHOUT_CONFIG_GPG_HOME}.${BRANCHOUT_CONFIG_GPG_KEYRING}/gpg.conf"
  echo "using key ${fingerPrint} for ${1}"
  updateKeysAdd "pgp:${fingerPrint}"
}

secretsSetupView() {
  ensureConfigValue "your email address" "EMAIL"
  runGpg --list-keys "${BRANCHOUT_CONFIG_EMAIL}"
}

secretsEdit() {
  echo "Not implemented" && exit 127
  runKubeSec edit "$1"
}

secretsView() {
  # shellcheck disable=SC2086
  runKubesec decrypt -x "src/main/secrets/${1}.yaml"
}

ensureKeys() {
  ensureConfigValue "Setup gpg key" "GPG_KEY"
  updateKeysAdd "${BRANCHOUT_CONFIG_GPG_KEY}"
}

secretUpdate() {
  verify "${1}"
  
  # shellcheck disable=SC2086
  if runKubesec encrypt -i "${@:2}" "src/main/secrets/${1}.yaml"; then
    displaySecretStatus "${1}" "BO_THEME_OK" "update ok"
  else
    displaySecretStatus "${1}" "BO_THEME_ERROR" "update failed"
    return 1
  fi
}

secretsUpdate() {
  ensureKeys
  test -d target/resources/kubernetes || usage-secrets "You need to build to get the templates"
  find target/resources/kubernetes -name 'secret*.template' | sort | sed -e 's,target/resources/kubernetes/\(.*\)/\(.*\).template,\1/\2,' | while read -r each; do
    if test ! -f "src/main/secrets/${each}.yaml"; then
      displaySecretStatus "${each}" "BO_THEME_HIGHLIGHT" "${1}missing"
    fi
  done
  find src/main/secrets -name 'secret*.yaml' | sort | sed -e 's,src/main/secrets/\(.*\)/\(.*\).yaml,\1/\2,' | while read -r each; do
    secretUpdate "${each}" "${@:2}"
  done
}

secretsCreate() {
  ensureKeys
  test -f "target/resources/kubernetes/${1}.template" || usage-secrets "Secret template not found for $1"
  test -f "src/main/secrets/$1.yaml" && usage-secrets "Secret already exists for ${1}"
  mkdir -p "src/main/secrets/$(dirname "$1")"
  
  # shellcheck disable=SC2046
  if runKubesec encrypt $(awk '{print "--key="$1}' KEYS) "target/resources/kubernetes/${1}.template" --output "src/main/secrets/${1}.yaml"; then
    displaySecretStatus "${1}" "BO_THEME_OK" "create ok"
  else
    displaySecretStatus "${1}" "BO_THEME_ERROR" "create failed"
  fi
}

displaySecretStatus() {
  echo -e "${BO_THEME_RESET}${1%/*} ${1##*/}\\033[70D\\033[70C${!2}${3}${BO_THEME_RESET}"
}

secretStatus() {
  if test ! -f "target/resources/kubernetes/${1}.template"; then
    displaySecretStatus "${1}" "BO_THEME_WARNING" "${2}no-template"
    return 0
  else
    if diff -u <(yq read "target/resources/kubernetes/${1}.template" data | sort | cut -d: -f1) <(yq read "src/main/secrets/${1}.yaml" data | sort | cut -d: -f1) >/dev/null; then
      displaySecretStatus "${1}" "BO_THEME_OK" "${2}ok"
      return 0
    else
      displaySecretStatus "${1}" "BO_THEME_ERROR" "${2}mismatch"
      test "${2}" = "verify " && diff -y <(yq read "target/resources/kubernetes/${1}.template" data | sort | cut -d: -f1) <(yq read "src/main/secrets/${1}.yaml" data | sort | cut -d: -f1)
      return 1
    fi
  fi
}

secretsStatus() {
  test -d target/resources/kubernetes || usage-secrets "You need to build to get the templates"
  find target/resources/kubernetes -name 'secret*.template' | sort | sed -e 's,target/resources/kubernetes/\(.*\)/\(.*\).template,\1/\2,' | while read -r each; do
    if test ! -f "src/main/secrets/${each}.yaml"; then
      displaySecretStatus "${each}" "BO_THEME_HIGHLIGHT" "${1}missing"
    fi
  done
  find src/main/secrets -name 'secret*.yaml' | sort | sed -e 's,src/main/secrets/\(.*\)/\(.*\).yaml,\1/\2,' | while read -r each; do
    secretStatus "${each}" "${1}" || true
  done
}

verifyAll() {
  secretsStatus "verify "
}

verify() {
  secretStatus "${1}" "verify "
}

showKeys() {
  test ! -f "KEYS" || cat "KEYS"
}

updateKeysRemove() {
  test -n "${1}" || usage-secrets "Provide a key to register"
  removedKey="${1}"
  case "${1}" in
    pgp:*)
    ;;
    kms:*)
    ;;
    aws:*)
    ;;
    *)
      removedKey="pgp:$(runGpg --with-colons --list-keys "${1}" | awk -F: '$1 == "fpr" {print $10; exit}')" || usage-secrets "Key type ${1#:*} unrecognised"
    ;;
  esac
  test -f "KEYS" && grep -v "^${removedKey}$" "KEYS" > "KEYS.tmp" && true
  sort "KEYS.tmp" > "KEYS"
  rm "KEYS.tmp"
}

updateKeysAdd() {
  test -n "${1}" || usage-secrets "Provide a key to register"
  newKey="${1}"
  case "${1}" in
    pgp:*)
    ;;
    kms:*)
    ;;
    aws:*)
    ;;
    *)
      newKey="pgp:$(runGpg --with-colons --list-keys "${1}" | awk -F: '$1 == "fpr" {print $10; exit}')" || usage-secrets "Key type ${1#:*} unrecognised"
    ;;
  esac
  test -f "KEYS" && grep -v "^${newKey}$" "KEYS" > "KEYS.tmp" && true
  echo "${newKey}" >> "KEYS.tmp"
  sort "KEYS.tmp" > "KEYS"
  rm "KEYS.tmp"
}

registerKey() {
  updateKeysAdd "${1}"
  showKeys
}

deregisterKey() {
  updateKeysRemove "${1}"
  showKeys
}

addKey() {
  registerKey "${1}"
  
  secretsUpdate "add-key" "--key=+${newKey#*:}"
}

removeKey() {
  deregisterKey "${1}"
  
  secretsUpdate "remove-key" "--key=-${removedKey#*:}"
}

usage-secrets() {
  test -n "${1}" && echo "${1}" && echo
  echo "branchout secrets: a tool for managing kubebernetes secrets

  branchout secrets settings|edit|create|show [<target>][--debug]

  settings - set up your local environment
  edit <target> - edit a secret file
  create <target> - create a secret file
  view <target> - show the contents of a secret file
  setup - setup an rsa 4096 key
  use-key <email> - set the given email and its associated key as the encryption context
  add-key <email> - add a key for encryption to the list
  remove-key <email> - remove a key from encryption set
  show-keys - show the keys used for encryption
  kubesec <parameters> - run a raw kubesec command with the correct keyring
  gpg <parametes>- run a raw gpg command with the correct keyring
  setupEd25519 - setup an ed25519 key
  "
  exit 127
}

main() {
  test $# -gt 0 || usage-secrets
  
  BRANCHOUT_PATH="$(dirname "$0")"
  
  # shellcheck source=branchout-configuration
  . "${BRANCHOUT_PATH}/branchout-configuration"
  # shellcheck source=branchout-environment
  . "${BRANCHOUT_PATH}/branchout-environment"
  
  GNUPG_DEBUG="-q"
  POSITIONAL=()
  for i in "$@"; do
    case $i in
      --passphrase=*)
        PASSPHRASE="${i#*=}"
        GNUPG_SETTINGS="--batch --pinentry=loopback --passphrase '${PASSPHRASE}' ${GNUPG_SETTINGS}"
        KUBESEC_SETTINGS="${KUBESEC_SETTINGS} --passphrase=${PASSPHRASE}"
        shift
      ;;
      --trace)
        GNUPG_SETTINGS="-v ${GNUPG_SETTINGS}"
        GNUPG_DEBUG=""
        set -x
        shift
      ;;
      --debug)
        GNUPG_DEBUG=""
        KUBESEC_SETTINGS="--debug ${KUBESEC_SETTINGS}"
        shift
      ;;
      --keyring=*)
        BRANCHOUT_CONFIG_GPG_KEYRING="${i#*=}"
        shift
      ;;
      *)
        POSITIONAL+=("$1") # save it in an array for later
        shift
      ;;
    esac
  done
  
  set -- "${POSITIONAL[@]}"
  
  case "$1" in
    edit)
      secretsEdit "$2"
    ;;
    view-setup)
      secretsSetupView
    ;;
    setup)
      setupRsa4096
    ;;
    setupEd25519)
      setupEd25519
    ;;
    create)
      secretsCreate "$2"
    ;;
    update)
      test -n "${2}" || usage-secrets "Please specify the secret to update <application>/<secret>"
      secretUpdate "$2" 
    ;;
    view)
      test -n "${2}" || usage-secrets "Please specify the secret to view <application>/<secret>"
      secretsView "$2"
    ;;
    status)
      secretsStatus
    ;;
    use-key)
      secretsUseKey "${2}" "${3}"
    ;;
    add-key)
      addKey "${2}"
    ;;
    register-key)
      registerKey "${2}"
    ;;
    deregister-key)
      deregisterKey "${2}"
    ;;
    remove-key)
      removeKey "${2}"
    ;;
    show*)
      showKeys
    ;;
    kubesec)
      runKubesec "${@:2}"
    ;;
    gpg)
      runGpg "${@:2}"
    ;;
    verify)
      if test -z "${2}"; then
        verifyAll
      else
        verify "$2"
      fi
    ;;
    *)
      usage-secrets
  esac
}

preflight
main "${@}"
