#!/bin/bash

test -n "${DEBUG}" && set -x
set -e

function branchout_get-config() {
  getConfigValue "${1}"
}

function branchout_set-config() {
  setConfigValue "${1}" "${2}"
}

function branchout_ensure-config() {
  if test $# -eq 2; then
    ensureConfigValue "${1}" "${1}" "${2}"
  else
    ensureConfigValue "${1}" "${1}"
  fi
}

function branchout_ensure() {
  if test $# -eq 2; then
    ensureValue "${1}" "${1}" "${2}"
  else
    ensureValue "${1}" "${1}"
  fi
}

function branchout_get() {
  getValue "${1}"
}

function branchout_set() {
  setValue "${1}" "${2}"
}

function branchout_status() {
  test -s "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}" || usage "No projects to show, try branchout add <project-name>"
  exec "${BRANCHOUT_PATH}/branchout-project" list "${1}" | xargs -P"${BRANCHOUT_THREADS-10}" -I{} "${BRANCHOUT_PATH}/branchout-project" status {}
}

function branchout_pull() {
  "${BRANCHOUT_PATH}/branchout-group" list "${1}" | xargs -P"${BRANCHOUT_THREADS-10}" -I{} "${BRANCHOUT_PATH}/branchout-group" pull {}
  exec "${BRANCHOUT_PATH}/branchout-project" list "${1}" | xargs -P"${BRANCHOUT_THREADS-10}" -I{} "${BRANCHOUT_PATH}/branchout-project" pull {}
}

function branchout_add() {
  test -n "${1}" || usage "Specify the repository to add, try branchout add <project-name>"
  sort -d "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}" <(echo "$1") | uniq > "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}.tmp"
  mv "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}.tmp" "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}"
  exec "${BRANCHOUT_PATH}/branchout" status "$("${BRANCHOUT_PATH}/branchout-group" derive "$1")"
}

function branchout_clone() {
  test -n "${1}" || usage "Specify the repository to clone, try branchout clone <project-name>"
  sort -d "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}" <(echo "$1") | uniq > "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}.tmp"
  mv "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}.tmp" "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}"
  exec "${BRANCHOUT_PATH}/branchout" pull "$1"
}

function branchout_version() {
  readlink "$(command -v branchout)" | sed -e 's,.*branchout/\(.*\)/bin/branchout,branchout-\1,'
}

# Typical use cases include:
# - Are we on Windows of any sort? Act differently for certain scenarios.
# - Are we on Mac with tools with different behaviour? Act differently for sed in-place and other cases.
# - Are we on Linux? Default behaviour.
# - Some other case? Just assume we're on something with GNU tooling: Default behaviour might work.
# Note, OSX tooling is distinct from the other BSDs, they're a mess.
# Note, WSL2 containers report as Linux, but that's usually correct anyway.
function branchout_os() {
  OS="unknown" # See above and draw your own conclusions or extend as needed.
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="linux"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS="mac"
  elif [[ "$OSTYPE" == "cygwin" ]]; then
    OS="windows"
  elif [[ "$OSTYPE" == "msys" ]]; then
    OS="windows"
  elif [[ "$OSTYPE" == "win32" ]]; then
    OS="windows"
  fi
  echo "${OS}"
}

# Update all Git URLs in 3 levels .git/config files that match the branchout Git base URL by prefix
function branchout_relocate() {
  if [ $# -ne 1 ]; then
    fail "branchout relocate requires exactly one argument: The new Git URL base to apply to all remotes in all repos that currently use ${BRANCHOUT_GIT_BASEURL}"
  fi

  NEW_GIT_BASEURL="${1}"

  if [ "${BRANCHOUT_GIT_BASEURL}" == "${NEW_GIT_BASEURL}" ]; then
    fail "Old prefix and new prefix are the same, no point in continuing: ${BRANCHOUT_GIT_BASEURL}"
  fi

  echo "Relocating all Git repos from ${BRANCHOUT_GIT_BASEURL} to ${NEW_GIT_BASEURL}"
  echo "in ${PROJECTION_DIRECTORY} and all nested repos 1 and 2 levels deep."

  # Start with the entire git URL
  OUR_FULL_URL="$(git --git-dir "${PROJECTION_DIRECTORY}/.git" remote get-url origin 2>/dev/null)"
  echo "This is the current Git URL for ${PROJECTION_DIRECTORY}: ${OUR_FULL_URL}"

  # Build our new URL
  NEW_FULL_URL="${OUR_FULL_URL//${BRANCHOUT_GIT_BASEURL}/${NEW_GIT_BASEURL}}"
  echo "This is the new Git URL for ${PROJECTION_DIRECTORY}: ${NEW_FULL_URL}"

  echo "Validating the Git repo pointed at by the new URL above works..."
  if git ls-remote "${NEW_FULL_URL}" > /dev/null; then
    echo "New URL exists and you have access, proceeding..."
  else
    fail "New URL is bad, repo does not exist, or you have no access to it: ${NEW_FULL_URL}"
  fi

  # Collect together all of the Git config files to process
  CONFIG_FILES=("${PROJECTION_DIRECTORY}/.git/config")

  GROUP_CONFIG_FILES=()
  while IFS='' read -r gitDirectory; do test -f "${gitDirectory}/config" && GROUP_CONFIG_FILES+=("${gitDirectory}/config"); done < <(find "${PROJECTION_DIRECTORY}" -mindepth 2 -maxdepth 2 -type d -name '.git')
  if [ ${#GROUP_CONFIG_FILES[@]} -gt 0 ]; then
    CONFIG_FILES=("${CONFIG_FILES[@]}" "${GROUP_CONFIG_FILES[@]}")
    echo "Found ${#GROUP_CONFIG_FILES[@]} group .git/config files to process"
  else
    echo "No group .git/config files found to process."
  fi

  PROJECT_CONFIG_FILES=()
  while IFS='' read -r gitDirectory; do test -f "${gitDirectory}/config" && PROJECT_CONFIG_FILES+=("${gitDirectory}/config"); done < <(find "${PROJECTION_DIRECTORY}" -mindepth 3 -maxdepth 3 -type d -name '.git')
  if [ ${#PROJECT_CONFIG_FILES[@]} -gt 0 ]; then
    CONFIG_FILES=("${CONFIG_FILES[@]}" "${PROJECT_CONFIG_FILES[@]}")
    echo "Found ${#PROJECT_CONFIG_FILES[@]} project .git/config files to process"
  else
    echo "No project .git/config files found to process."
  fi

  echo "Processing a total of ${#CONFIG_FILES[@]} .git/config files, including the base directory"

  if [ "$(branchout_os)" == "mac" ]; then
    test -n "${DEBUG}" && echo "We're on a mac, do weird OSX-specific sed in-place replacement"
    sed -i '' "s,${BRANCHOUT_GIT_BASEURL},${NEW_GIT_BASEURL}," "${CONFIG_FILES[@]}"
  else
    test -n "${DEBUG}" && echo "We're not on a mac, do normal sed in-place replacement"
    sed -i "s,${BRANCHOUT_GIT_BASEURL},${NEW_GIT_BASEURL}," "${CONFIG_FILES[@]}"
  fi
  echo "Relocation complete. To reverse what you just did, run 'branchout relocate ${BRANCHOUT_GIT_BASEURL}'"
}

function usage() {
  test -n "${1}" && echo "${1}" && echo
  echo "branchout: a tool for managing multi-repo projects

    status: show the list of known projects and their current state

    pull <glob match>: pull all the matching projects and display their status, defaults to all

    clone <repository name>: add the repository to Branchoutprojects and clone it

    relocate <new git clone URL base>: Repoint all matching remotes for all repos under the base dir to a new clone URL

    add: add a project to Branchoutprojects

    init: Intialise the current git repository as a branchout root project

    get <PROPERTY_NAME>: get a branchout property

    set <PROPERTY_NAME> <value>: set a branchout property

    ensure <PROPERTY_NAME>: ensure that a branchout property is set, prompting for a value if not

    set_config <CONFIG_NAME> <value>: set a branchout configuration value

    get_config <CONFIG_NAME>: get a branchout configuration value

    Modules:

      project: see branchout project help

      group: see branchout group help

      maven: see branchout maven help

      yarn: set branchout yarn help
    "
  exit 1
}

function execute() {
  if declare -f -F "branchout_${branchoutModule}" >/dev/null; then
    # shellcheck source=branchout-configuration
    . "${BRANCHOUT_PATH}/branchout-configuration"
    # shellcheck source=branchout-environment
    . "${BRANCHOUT_PATH}/branchout-environment"

    eval branchout_"${branchoutModule}" "${@}"

  elif test -x "${BRANCHOUT_PATH}/branchout-${branchoutModule}"; then
    exec "${BRANCHOUT_PATH}/branchout-${branchoutModule}" "${@}"

  else
    usage "branchout-${branchoutModule} is not installed (or doesn't exist)"

  fi
}

function main() {
  test $# -gt 0 || usage
  if [[ "${*}" =~ "--trace" ]]; then
    set -x
  fi

  BRANCHOUT_PATH="$(dirname "$0")"

  case "${1}" in
    help)
      usage
      ;;
    init*)
      shift
      exec "${BRANCHOUT_PATH}/branchout-init" "${@}"
      ;;
    version)
      branchout_version
      ;;
    mvn)
      branchoutModule="maven"
      shift
      execute "${@}"
      ;;
    *)
      branchoutModule="${1}"
      shift
      execute "${@}"
      ;;
  esac

}

main "${@}"
