#!/bin/bash

set -e

function usage_branchout_project() {
  echo "branchout project list|status|pull [project]
  
  status project-name
      
      Return the status of the given project, Not cloned, branch, rebasing
  
  pull project-name
  
      Attempt to pull the project, show the branch or error
  
  list [prefix]
  
      List all the projects with the given prefix
  
  "
  
  exit 1
}

function projectList() {
  if test $# -eq 0; then
    sort "${BRANCHOUT_DIRECTORY}/Branchoutprojects"
  else
    grep -e "^${1}" -e "^${BRANCHOUT_PREFIX}-${1}" "${BRANCHOUT_DIRECTORY}/Branchoutprojects" | sort
  fi
}

function projectListWithGroups() {
  sort <(cat "${BRANCHOUT_DIRECTORY}/Branchoutprojects") <(branchout_project groups)
}


function projectStatus() {
   projectName=$(branchout_group deriveProject "${1}")
   projectGroup=$(branchout_group derive "${1}")
   if test -d "${BRANCHOUT_DIRECTORY}/${projectGroup}/${projectName}"; then
     cd "${BRANCHOUT_DIRECTORY}/${projectGroup}/${projectName}" || usage_branchout_project "Failed to enter project directory"
     
     projectBranch=$(git rev-parse --abbrev-ref HEAD)
     if test "${projectBranch}" = "master"; then
       echo -e "\033[0m${2}${projectGroup}/${projectName}\033[70D\033[70C${projectBranch}\033[0m"
     elif test "${projectBranch}" = "HEAD"; then
       echo -e "\033[0m${2}${projectGroup}/${projectName}\033[70D\033[70C\033[38;5;202m<rebase>\033[0m"
     else
       echo -e "\033[0m${2}${projectGroup}/${projectName}\033[70D\033[70C\033[32m${projectBranch}\033[0m"
     fi
   else
     echo -e "\033[0m${2}${projectGroup}/${projectName}\033[70D\033[70C\033[35mNot cloned\033[0m"
   fi
}

function projectUpdateError() {
  projectBranch=$(git rev-parse --abbrev-ref HEAD)
  if test "${projectBranch}" = "HEAD"; then
    echo -e "\033[0m${2}${projectGroup}/${1}\033[70D\033[70C\033[38;5;202m<rebase>\033[0m"
  else
    echo -e "\033[0m${2}\033[31m${projectGroup}/${1}\033[0m \033[70D\033[70C\033[1m $( git pull --rebase origin 2>&1| head -n1)\033[0m" 
  fi
}

function projectUpdate() {
  cd "${BRANCHOUT_DIRECTORY}/${projectGroup}/${projectName}" || usage_branchout_project "Failed to enter project directory"
  if git pull --rebase origin > /dev/null 2>&1; then
    projectStatus "${projectName}" "Pulled  "
  else
    projectUpdateError "${projectName}" "Failed  "
  fi
}

function projectClone() {
  test -d "${BRANCHOUT_DIRECTORY}/${projectGroup}" || branchout_group pull "${projectGroup}"
  cd "${BRANCHOUT_DIRECTORY}/${projectGroup}" || usage_branchout_project "Project group ${projectGroup} directory not found"
  echo -e "\033[0mCloning \033[92m${projectGroup}/${projectName}\033[0m"
  RESULT=$(git clone "${BRANCHOUT_GIT_BASEURL}/${gitProject}" 2>&1)
  if test $? -eq 0; then
    projectStatus "${projectName}" "Pulled  "
  else
    echo -e "\033[0mCloning failed: \033[31m${projectGroup}/${projectName}\n${RESULT}\033[0m"
  fi
}

function projectPull() {
   projectName=$(branchout_group deriveProject "${1}")
   projectGroup=$(branchout_group derive "${1}")
   gitProject="${1}"
   if test -d "${BRANCHOUT_DIRECTORY}/${projectGroup}/${projectName}/.git"; then
     projectUpdate 
   else
     projectClone 
   fi
}

function branchout_project() {
  case "${1}" in
    list)
      if test "${2}" = "--grouped"; then
        projectListWithGroups
      else
        projectList "${2}"
      fi
      ;;
    status)
      test -n "${2}" || usage_branchout_project "Must provide project"
      projectStatus "${2}"
      ;;
    pull)
      test -n "${2}" || usage_branchout_project "Must provide project"
      projectPull "${2}"
      ;;
    *)
      usage_branchout_project
  esac
}

function usage_branchout_group() {
  echo "branchout group derive [project]
  
  status 
      
      Return the status of the given group, Not cloned, branch, rebasing
  
  pull group
  
      Attempt to pull the group, show the branch or error
  
  list
  
      List all the groups
      
  STDIN
  
      Derive the group for all the projects piped in
  
  "
  
  exit 1
}

function branchoutGroupDeriveStdin() {
  # STDIN is always derived
  while read -r each; do
    branchoutGroupDerive "${each}"
  done
}

function branchoutGroupPull() {
  projectGroup="${1}"
  if test -d "${BRANCHOUT_DIRECTORY}/${projectGroup}"; then
    branchoutGroupUpdate
  else
    branchoutGroupClone
  fi
}

function groupUpdateError() {
  projectBranch=$(git rev-parse --abbrev-ref HEAD)
  if test "${projectBranch}" = "HEAD"; then
    echo -e "\033[0m${2}${projectGroup}\033[70D\033[70C\033[38;5;202m<rebase>\033[0m"
  else
    echo -e "\033[0m${2}\033[31m${projectGroup}\033[0m \033[70D\033[70C\033[1m $( git pull --rebase origin 2>&1| head -n1)\033[0m" 
  fi
}

function branchoutGroupUpdate() {
  cd "${BRANCHOUT_DIRECTORY}/${projectGroup}" || usage_branchout_group "Failed to enter group directory"
  if test ! -d "${BRANCHOUT_DIRECTORY}/${projectGroup}/.git"; then
     echo -e "\033[0mNothing ${projectGroup}\033[70D\033[70C\033[35mNot a repository\033[0m"
   elif git pull --rebase origin > /dev/null 2>&1; then
    groupStatus "${projectGroup}" "Pulled  "
  else
    groupUpdateError "${projectGroup}" "Failed  "
  fi
}

function branchoutGroupClone() {
  test -d "${BRANCHOUT_DIRECTORY}/${projectGroup}" && usage_branchout_group "Trying to clone a group that already exists"
  echo -e "\033[0mCloning \033[92m${projectGroup}\033[0m"
  if git clone "${BRANCHOUT_GIT_BASEURL}/${projectGroup}" "${BRANCHOUT_DIRECTORY}/${projectGroup}" >/dev/null 2>&1; then
    groupStatus "${projectGroup}" "Pulled  "
  else
    echo -e "\033[0mCloning failed: \033[31m$(git clone "${BRANCHOUT_GIT_BASEURL}/${projectGroup}" 2>&1)\033[0m"
    echo -e "\033[0mJust using plain directory \033[32m${projectGroup}\033[0m"
    mkdir "${BRANCHOUT_DIRECTORY}/${projectGroup}"
  fi
}

function branchoutGroups() {
  branchout_project list "${1}" | branchout_group derive --stdin | sort | uniq
}

function branchoutGroupDerive() {
  if test "${1#*-}" = "maven-plugin"; then
    echo "plugins"
    
  elif test -z "${BRANCHOUT_PREFIX}"; then
    echo "${1%%-*}"
    
  else
    noPrefix="${1#${BRANCHOUT_PREFIX}-}"
    echo "${noPrefix%%-*}"
  fi

}

function groupStatus() {
   projectGroup="${1}"
   if test -d "${BRANCHOUT_DIRECTORY}/${projectGroup}"; then
     cd "${BRANCHOUT_DIRECTORY}/${projectGroup}" || usage_branchout_group "Failed to enter group directory"
     
     projectBranch=$(git rev-parse --abbrev-ref HEAD)
     if test "${projectBranch}" = "master"; then
       echo -e "\033[0m${2}${projectGroup}\033[70D\033[70C${projectBranch}\033[0m"
     elif test "${projectBranch}" = "HEAD"; then
       echo -e "\033[0m${2}${projectGroup}\033[70D\033[70C\033[38;5;202m<rebase>\033[0m"
     else
       echo -e "\033[0m${2}${projectGroup}\033[70D\033[70C\033[32m${projectBranch}\033[0m"
     fi
     cd "${BRANCHOUT_DIRECTORY}"
   else
     echo -e "\033[0m${2}${projectGroup}\033[70D\033[70C\033[35mNot cloned\033[0m"
   fi
}


function branchoutProjectDerive() {
  echo "${1}"
}

function branchout_group() {
  case $1 in
    derive) 
      if test "${2}" = "--stdin"; then
        branchoutGroupDeriveStdin
      else
        branchoutGroupDerive "${2}"
      fi
      ;;
    deriveProject) 
      branchoutProjectDerive "${2}"
      ;;
    pull)
      test -n "${2}" || usage_branchout_group "Must provide group"
      branchoutGroupPull "${2}"
      ;;
    list)
      branchoutGroups "${2}"
      ;;
    status)
      branchoutGroupStatus "${2}"
      ;;

    *)
      usage_branchout_project
      ;;
  esac
}

function usage() {
  test -n "${1}" && echo "${1}" && echo
  echo "branchout: a tool for managing multi-repo projects
    
    status: show the list of known projects and their current state
    
    pull: pull all the projects and display their status
    
    add: add a project to the list
    
    init: Intialise the current git repository as a branchout root project
    
    project: see branchout project help
    
    group: see branchout group help

    "
  exit 1
}

function branchoutDirectory() {
  BRANCHOUT_DIRECTORY="${PWD}"
  while test ! -f "${BRANCHOUT_DIRECTORY}/Branchoutfile"; do
    BRANCHOUT_DIRECTORY=$(dirname "${BRANCHOUT_DIRECTORY}")
    test "${BRANCHOUT_DIRECTORY}" = '/' && usage "Branchoutfile configuration not found in parent hierarchy, run branchout init" 
  done
  export BRANCHOUT_DIRECTORY
}

function loadBranchout() {
  test -n "${BRANCHOUT_LOADED}" && return 0
  branchoutDirectory
  
  # shellcheck source=examples/Branchoutfile
  source "${BRANCHOUT_DIRECTORY}/Branchoutfile"
  
  test -z "${BRANCHOUT_NAME}" && usage "Branchout name not defined in Branchoutfile, run branchout init"
  export BRANCHOUT_HOME="${HOME}/branchout/${BRANCHOUT_NAME}"

  test -z "${BRANCHOUT_GIT_BASEURL}" && usage "Git base url is not defined in Branchoutfile, run branchout init"
  export BRANCHOUT_GIT_BASEURL
  export BRANCHOUT_PREFIX
  
  test ! -d "${BRANCHOUT_HOME}" && usage "Branchout home '${BRANCHOUT_HOME}' does not exist, run branchout init"
  test -f "${BRANCHOUT_DIRECTORY}/Branchoutprojects" || usage "Branchoutprojects file missing, try branchout add [repository]"
  
  export BRANCHOUT_LOADED="true"
}

function branchoutProjects() {
  cat "${BRANCHOUT_DIRECTORY}/Branchoutprojects"
}


function branchoutProjectStatus() {
  if test -d "$1"; then
    echo "$1 master"
  else
    echo "$1 Not cloned"
  fi
}

function branchout_init_name() {
  BRANCHOUT_NAME="$(basename "${PWD}")"
  printf "Enter branchout name [%s]: ", "${DEFAULT_BRANCHOUT_NAME}"
  read -r BRANCHOUT_NAME
  test -n "${BRANCHOUT_NAME}" && BRANCHOUT_NAME="$(basename "${PWD}")"
}

function branchoutInitFromUrl() {
  test -d "${HOME}/projects" || mkdir -p "${HOME}/projects"
  cd "${HOME}/projects"
  git clone "${1}" || usage "Failed to clone ${1}"
  cd $(basename "${1}")
  source "Branchoutfile"
  test -d "${HOME}/branchout/${BRANCHOUT_NAME}" || mkdir -p "${HOME}/branchout/${BRANCHOUT_NAME}"
}

function branchoutInitInteractive() {
  branchout_init_name
  
  BRANCHOUT_GIT_BASEURL="$(git remote get-url origin | cut -d/ -f1)"
  test $? -ne 0 && usage "Could not determine git baserul"
  
  echo "BRANCHOUT_NAME=${BRANCHOUT_NAME}
BRANCHOUT_GIT_BASEURL=${BRANCHOUT_GIT_BASEURL}" > Branchoutfile
  touch Branchoutprojects
}

function branchout_init() {
  if test -n "${1}"; then
    branchoutInitFromUrl "${1}"
  else
    branchoutInitInteractive
  fi
}

function branchout_status() {
  test -s "${BRANCHOUT_DIRECTORY}/Branchoutprojects" || usage "No projects to show, try branchout add <project-name>"
  branchout_project list "${1}" | xargs -P"${BRANCHOUT_THREADS-10}" -I{} branchout project status {}
}

function branchout_pull() {
  branchout_group list "${1}" | xargs -P"${BRANCHOUT_THREADS-10}" -I{} branchout group pull {}
  branchout_project list "${1}" | xargs -P"${BRANCHOUT_THREADS-10}" -I{} branchout project pull {}
}

function branchout_add() {
  sort "${BRANCHOUT_DIRECTORY}/Branchoutprojects" <(echo "$1") > "${BRANCHOUT_DIRECTORY}/Branchoutprojects.tmp"
  mv "${BRANCHOUT_DIRECTORY}/Branchoutprojects.tmp" "${BRANCHOUT_DIRECTORY}/Branchoutprojects"
  branchout_status "$(branchoutGroupDerive "$1")"
}

function branchout_version() {
  echo "branchout-1.3"
}

function main() {
  test $# -gt 0 || usage
  test "${1}" = "help" && usage
  
  if test "${1}" = "init"; then
    shift
    branchout_init "${@}"
   
  else
    loadBranchout
    branchoutModule="${1}"
    shift
    if declare -f -F branchout_"${branchoutModule}" >/dev/null; then
      eval branchout_"${branchoutModule}" "${@}"
    else
      eval branchout_pull "${branchoutModule}" "${@}"
    fi
  fi
}

main "${@}"
