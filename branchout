#!/bin/bash

test -n "${DEBUG}" && set -x
set -e

function branchout_get-config() {
  if test -f "${BRANCHOUT_STATE}/branchoutrc"; then
    grep "^BRANCHOUT_CONFIG_${1}=" "${BRANCHOUT_STATE}/branchoutrc" | sed -e 's,^.*="\(.*\)"$,\1,'
  fi
}

function branchout_set-config() {
  test -z "${2}" && usage "You must supply a value to set"
  test -f "${BRANCHOUT_STATE}/branchoutrc" && grep -v "^BRANCHOUT_CONFIG_${1}=" "${BRANCHOUT_STATE}/branchoutrc" > "${BRANCHOUT_STATE}/branchoutrc.tmp" && true
  echo "BRANCHOUT_CONFIG_${1}=\"${2}\"" >> "${BRANCHOUT_STATE}/branchoutrc.tmp"
  sort "${BRANCHOUT_STATE}/branchoutrc.tmp" > "${BRANCHOUT_STATE}/branchoutrc"
  rm "${BRANCHOUT_STATE}/branchoutrc.tmp"
}

function branchout_ensure_config() {
  ensureConfigValue "${1}" "${1}"
}

function branchout_ensure() {
  ensureValue "${1}" "${1}"
}

function branchout_get() {
  grep "^${1}=" "${PROJECTION_DIRECTORY}/${BRANCHOUT_FILE}" | sed -e 's,^.*="\(.*\)"$,\1,'
}

function branchout_set() {
  grep -v "^${1}=" "${PROJECTION_DIRECTORY}/${BRANCHOUT_FILE}" > "${PROJECTION_DIRECTORY}/${BRANCHOUT_FILE}".tmp && true
  echo "${1}=\"${2}\"" >> "${PROJECTION_DIRECTORY}/${BRANCHOUT_FILE}.tmp"
  sort "${PROJECTION_DIRECTORY}/${BRANCHOUT_FILE}.tmp" > "${PROJECTION_DIRECTORY}/${BRANCHOUT_FILE}"
  rm "${PROJECTION_DIRECTORY}/${BRANCHOUT_FILE}.tmp"
}

function branchout_status() {
  test -s "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}" || usage "No projects to show, try branchout add <project-name>"
  exec "${BRANCHOUT_PATH}/branchout-project" list "${1}" | xargs -P"${BRANCHOUT_THREADS-10}" -I{} "${BRANCHOUT_PATH}/branchout-project" status {}
}

function branchout_pull() {
  "${BRANCHOUT_PATH}/branchout-group" list "${1}" | xargs -P"${BRANCHOUT_THREADS-10}" -I{} "${BRANCHOUT_PATH}/branchout-group" pull {}
  exec "${BRANCHOUT_PATH}/branchout-project" list "${1}" | xargs -P"${BRANCHOUT_THREADS-10}" -I{} "${BRANCHOUT_PATH}/branchout-project" pull {}
}

function branchout_add() {
  test -n "${1}" || usage "Specify the repository to add, try branchout add <project-name>"
  sort "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}" <(echo "$1") | uniq > "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}.tmp"
  mv "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}.tmp" "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}"
  exec "${BRANCHOUT_PATH}/branchout" status "$("${BRANCHOUT_PATH}/branchout-group" derive "$1")"
}

function branchout_clone() {
  test -n "${1}" || usage "Specify the repository to clone, try branchout clone <project-name>"
  sort "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}" <(echo "$1") | uniq > "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}.tmp"
  mv "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}.tmp" "${PROJECTION_DIRECTORY}/${BRANCHOUT_PROJECTS}"
  exec "${BRANCHOUT_PATH}/branchout" pull "$1"
}

function branchout_version() {
  readlink "$(command -v branchout)" | sed -e 's,.*branchout/\(.*\)/bin/branchout,branchout-\1,'
}

function usage() {
  test -n "${1}" && echo "${1}" && echo
  echo "branchout: a tool for managing multi-repo projects

    status: show the list of known projects and their current state

    pull <glob match>: pull all the matching projects and display their status, defaults to all

    clone <repository name>: add the repository to Branchoutprojects and clone it

    add: add a project to Branchoutprojects

    init: Intialise the current git repository as a branchout root project

    get <PROPERTY_NAME>: get a branchout property

    set <PROPERTY_NAME> <value>: set a branchout property

    ensure <PROPERTY_NAME>: ensure that a branchout property is set, prompting for a value if not

    set_config <CONFIG_NAME> <value>: set a branchout configuration value

    get_config <CONFIG_NAME>: get a branchout configuration value

    Modules:

      project: see branchout project help

      group: see branchout group help

      maven: see branchout maven help

      yarn: set branchout yarn help
    "
  exit 1
}

function execute() {
  if declare -f -F branchout_"${branchoutModule}" >/dev/null; then
    # shellcheck source=branchout-environment
    . "${BRANCHOUT_PATH}/branchout-environment"
    eval branchout_"${branchoutModule}" "${@}"

  elif test -x "${BRANCHOUT_PATH}/branchout-${branchoutModule}"; then
    exec "${BRANCHOUT_PATH}/branchout-${branchoutModule}" "${@}"

  else
    usage "branchout-${branchoutModule} is not installed (or doesn't exist)"

  fi
}

function main() {
  test $# -gt 0 || usage
  if [[ "${*}" =~ "--trace" ]]; then
    set -x
  fi

  BRANCHOUT_PATH="$(dirname "$0")"

  # shellcheck source=branchout-configuration
  . "${BRANCHOUT_PATH}/branchout-configuration"

  case "${1}" in
    help)
      usage
      ;;
    init*)
      shift
      exec "${BRANCHOUT_PATH}/branchout-init" "${@}"
      ;;
    version)
      branchout_version
      ;;
    mvn)
      branchoutModule="maven"
      shift
      execute "${@}"
      ;;
    *)
      branchoutModule="${1}"
      shift
      execute "${@}"
      ;;
  esac

}

main "${@}"
