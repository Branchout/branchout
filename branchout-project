#!/bin/bash

function usage() {
  echo "branchout-project list|status|pull [project]
  
  status project-name
      
      Return the status of the given project, Not cloned, branch, rebasing
  
  pull project-name
  
      Attempt to pull the project, show the branch or error
  
  list [prefix]
  
      List all the projects with the given prefix
  
  "
  
  exit 1
}

function projectList() {
  if test $# -eq 0; then
    sort "${BRANCHOUT_DIRECTORY}/Branchoutprojects"
  else
    grep -e "^${1}" -e "^${BRANCHOUT_PREFIX}-${1}" "${BRANCHOUT_DIRECTORY}/Branchoutprojects" | sort
  fi
}

function projectListWithGroups() {
  sort <(cat "${BRANCHOUT_DIRECTORY}/Branchoutprojects") <(branchout-project groups)
}


function projectStatus() {
   projectName=$(branchout-group deriveProject "${1}")
   projectGroup=$(branchout-group derive "${1}")
   if test -d "${BRANCHOUT_DIRECTORY}/${projectGroup}/${projectName}"; then
     cd "${BRANCHOUT_DIRECTORY}/${projectGroup}/${projectName}" || usage "Failed to enter project directory"
     
     projectBranch=$(git rev-parse --abbrev-ref HEAD)
     if test "${projectBranch}" = "master"; then
       echo -e "\033[0m${2}${projectGroup}/${projectName}\033[70D\033[70C${projectBranch}\033[0m"
     elif test "${projectBranch}" = "HEAD"; then
       echo -e "\033[0m${2}${projectGroup}/${projectName}\033[70D\033[70C\033[38;5;202m<rebase>\033[0m"
     else
       echo -e "\033[0m${2}${projectGroup}/${projectName}\033[70D\033[70C\033[32m${projectBranch}\033[0m"
     fi
   else
     echo -e "\033[0m${2}${projectGroup}/${projectName}\033[70D\033[70C\033[35mNot cloned\033[0m"
   fi
}

function projectUpdateError() {
  projectBranch=$(git rev-parse --abbrev-ref HEAD)
  if test "${projectBranch}" = "HEAD"; then
    echo -e "\033[0m${2}${projectGroup}/${1}\033[70D\033[70C\033[38;5;202m<rebase>\033[0m"
  else
    echo -e "\033[0m${2}\033[31m${projectGroup}/${1}\033[0m \033[70D\033[70C\033[1m $( git pull --rebase origin 2>&1| head -n1)\033[0m" 
  fi
}

function projectUpdate() {
  cd "${BRANCHOUT_DIRECTORY}/${projectGroup}/${projectName}" || usage "Failed to enter project directory"
  git pull --rebase origin > /dev/null 2>&1 || projectUpdateError "${projectName}" "Failed "
}

function projectClone() {
  test -d "${projectGroup}" || branchout-group pull "${projectGroup}"
  cd "${projectGroup}" || useage "Project group ${projectGroup} directory not found"
  echo -e "\033[0mCloning \033[92m${projectGroup}/${projectName}\033[0m"
  RESULT=$(git clone "${BRANCHOUT_GIT_BASEURL}/${gitProject}" 2>&1)
  if test $? -eq 0; then
    projectStatus "${projectName}" "Pulled "
  else
    echo -e "\033[0mCloning failed: \033[31m${projectGroup}/${projectName}\n${RESULT}\033[0m"
  fi
}

function projectPull() {
   projectName=$(branchout-group deriveProject "${1}")
   projectGroup=$(branchout-group derive "${1}")
   gitProject="${1}"
   if test -d "${BRANCHOUT_DIRECTORY}/${projectGroup}/${projectName}/.git"; then
     projectUpdate 
   else
     projectClone 
   fi
}

function main() {
  case "${1}" in
    list)
      if test "${2}" = "--grouped"; then
        projectListWithGroups
      else
        projectList "${2}"
      fi
      ;;
    status)
      test -n "${2}" || usage "Must provide project"
      projectStatus "${2}"
      ;;
    pull)
      test -n "${2}" || usage "Must provide project"
      projectPull "${2}"
      ;;
    *)
      usage
  esac
}

main "${@}"
