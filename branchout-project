#!/bin/bash

function usage() {
  echo "branchout-project list|status|pull [project]
  
  status project-name
      
      Return the status of the given project, Not cloned, branch, rebasing
  
  pull project-name
  
      Attempt to pull the project, show the branch or error
  
  list [prefix]
  
      List all the projects with the given prefix
  
  "
  
  exit 1
}

function projectList() {
  if test $# -eq 0; then
    sort "${BRANCHOUT_DIRECTORY}/Branchoutprojects"
  else
    grep "^${1}" "${BRANCHOUT_DIRECTORY}/Branchoutprojects" | sort
  fi
}

function projectListWithGroups() {
  sort <(cat "${BRANCHOUT_DIRECTORY}/Branchoutprojects") <(branchout-project groups)
}

function projectGroups() {
  projectList | branchout-group | sort | uniq
}

function projectStatus() {
   projectGroup=$(branchout-group "${1}")
   if test -d "${BRANCHOUT_DIRECTORY}/${projectGroup}/${1}"; then
     cd "${BRANCHOUT_DIRECTORY}/${projectGroup}/${1}" || usage "Failed to enter project directory"
     projectBranch=$(git rev-parse --abbrev-ref HEAD)
     echo -e "${projectGroup}/${1}\033[70D\033[70C\033[32m${projectBranch}\033[0m"
   else
     echo -e "${projectGroup}/${1}\033[70D\033[70C\033[35mNot cloned\033[0m"
   fi
}

function projectPull() {
   projectGroup=$(branchout-group "${1}")
}

function main() {
  case "${1}" in
    list)
      if test "${2}" = "--grouped"; then
        projectListWithGroups
      else
        projectList "${2}"
      fi
      ;;
    groups)
      projectGroups
      ;;
    status)
      test -n "${2}" || usage "Must provide project"
      projectStatus "${2}"
      ;;
    pull)
      test -n "${2}" || usage "Must provide project"
      proujectPull "${2}"
      ;;
    *)
      usage
  esac
}

main "${@}"
