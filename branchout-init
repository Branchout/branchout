#!/bin/bash

test -n "${DEBUG}" && set -x
set -e

# Check if the give directory contains the branchout files
function branchoutFiles() {
  if test -f "${1}/Branchoutfile"; then
    BRANCHOUT_FILE=Branchoutfile
    BRANCHOUT_PROJECTS=Branchoutprojects
    return 0
  fi

  if test -f "${1}/.branchout"; then
    BRANCHOUT_FILE=.branchout
    BRANCHOUT_PROJECTS=.projects
    return 0
  fi

  return 1
}

function branchout_init_name() {
  DEFAULT_BRANCHOUT_NAME="$(basename "${PWD}")"
  printf "Enter branchout name [%s]: " "${DEFAULT_BRANCHOUT_NAME}"
  read -r BRANCHOUT_NAME
  if test -z "${BRANCHOUT_NAME}"; then
     BRANCHOUT_NAME="${DEFAULT_BRANCHOUT_NAME}"
     echo
  fi
}

function branchoutInitFromUrl() {
  test -d "${HOME}/${BRANCHOUT_PROJECTS_DIRECTORY}" || mkdir -p "${HOME}/${BRANCHOUT_PROJECTS_DIRECTORY}"
  cd "${HOME}/${BRANCHOUT_PROJECTS_DIRECTORY}"
  BRANCHOUT_NAME="$(basename "${1}" | sed -e 's,.git$,,')"
  PROJECT_NAME="${2:-${BRANCHOUT_NAME}}"
  test -d "${PROJECT_NAME}" && usage "${HOME}/${BRANCHOUT_PROJECTS_DIRECTORY}/${PROJECT_NAME} is already initialised"
  git clone "${1}" "${PROJECT_NAME}" >/dev/null 2>&1 || usage "Failed to branchout projection ${1} into ${HOME}/${BRANCHOUT_PROJECTS_DIRECTORY}/${PROJECT_NAME}" "$(git clone "${1}" "${BRANCHOUT_NAME}")"
  echo "Branchout projection '${BRANCHOUT_NAME}' in ${HOME}/${BRANCHOUT_PROJECTS_DIRECTORY}/${PROJECT_NAME}"
  cd "${PROJECT_NAME}" || usage "Failed to enter projection directory ${HOME}/${BRANCHOUT_PROJECTS_DIRECTORY}/${PROJECT_NAME}"

  branchoutInit
}

function branchoutInitLocal() {
  test -d "${HOME}/${BRANCHOUT_PROJECTS_DIRECTORY}" || mkdir -p "${HOME}/${BRANCHOUT_PROJECTS_DIRECTORY}"
  cd "${HOME}/${BRANCHOUT_PROJECTS_DIRECTORY}"
  test -d .git || git init

  branchoutInit
}

function branchoutDefaultFiles() {
   BRANCHOUT_FILE=Branchoutfile
   BRANCHOUT_PROJECTS=Branchoutprojects
   touch Branchoutfile
   test -f Branchoutprojects || touch Branchoutprojects
 }

function branchoutInit() {
  if ! branchoutFiles "${PWD}"; then
    branchoutDefaultFiles
  fi

  # shellcheck source=examples/Branchoutfile
  source "${BRANCHOUT_FILE}"

  if test -z "${BRANCHOUT_NAME}"; then
    branchout_init_name
    echo "BRANCHOUT_NAME=${BRANCHOUT_NAME}" | tee -a ${BRANCHOUT_FILE}
  fi

  test -d "${HOME}/branchout/${BRANCHOUT_NAME}" || mkdir -p "${HOME}/branchout/${BRANCHOUT_NAME}"

  ensureConfigValue GIT_EMAIL
  git config user.email "${BRANCHOUT_CONFIG_GIT_EMAIL}"
  echo "Set the git author to ${BRANCHOUT_CONFIG_GIT_EMAIL}"
}

function usage() {
  test $# -gt 1  && echo "${@}" && echo
  echo "branchout-init [git-url] [relocation]

  To branchout from GitHub and use the repository name for the projection

    branchout init https://github.com/branchout/branchout-project

  To branchout from GitHub and use a different name for the projection

    branchout init https://github.com/branchout/branchout-project branchout

  To interactively initialise a projection locally

    branchout init 
  "

  exit 1
}

function main() {
  BRANCHOUT_PATH="$(dirname "$0")"

  # shellcheck source=branchout-configuration
  . "${BRANCHOUT_PATH}/branchout-configuration"

  if test -n "${1}"; then
    branchoutInitFromUrl "${1}" "${2}"

  else
    branchoutInitLocal
  fi

  export BRANCHOUT_PROJECTS
  export BRANCHOUT_FILE
}

main "${@}"
