#!/bin/bash

test -n "${DEBUG}" && set -x
set -e

function runMaven() {
  commands=("${@}")
  declare -a expandedCommands
  POM_FILE="pom.xml"
  test -f reactor.xml && POM_FILE="reactor.xml"

  for each in ${!commands[*]}; do
    case "${commands[$each]}" in
      cv)   expandedCommands+=('clean' 'verify');;
      cvi)  expandedCommands+=('-Pwebapp-interactive' 'clean' 'verify');;
      vi)   expandedCommands+=('-Pwebapp-interactive' 'verify');;

      hth)  expandedCommands+=('clean' 'verify'); POM_FILE="head-to-head.xml";;
      hthi) expandedCommands+=('-Pwebapp-interactive' 'clean' 'verify'); POM_FILE="head-to-head.xml";;

      tag) expandedCommands+=('-B' 'validate' 'release:prepare');;
      up) expandedCommands+=('release:perform');;

      # Project information commands
      dep) expandedCommands+=('dependency:resolve');;
      src) expandedCommands+=('dependency:sources');;
      tree) expandedCommands+=('dependency:tree');;
      pom) expandedCommands+=('help:effective-pom');;
      set) expandedCommands+=('help:effective-settings');;

      # Project definition update commands
      par) expandedCommands+=('versions:update-parent');;
      plu) expandedCommands+=('versions:display-plugin-updates');;
      update) expandedCommands+=('bounds:update');;
      upgrade) expandedCommands+=('bounds:upgrade');;

      *)    expandedCommands+=("${commands[$each]}");;
    esac
  done

  echo "mvn -f ${POM_FILE} -s ${BRANCHOUT_HOME}/maven/settings.xml ${expandedCommands[*]}"
  exec mvn -f "${POM_FILE}" -s "${BRANCHOUT_HOME}/maven/settings.xml" "${expandedCommands[@]}"
}

function mavenSettings() {
  if test -z "${BRANCHOUT_MAVEN_REPOSITORY}"; then
    readValue "your maven repository" "BRANCHOUT_MAVEN_REPOSITORY"
    [[ ${BRANCHOUT_MAVEN_REPOSITORY} =~ ^https:// ]] || BRANCHOUT_MAVEN_REPOSITORY="https://${BRANCHOUT_MAVEN_REPOSITORY}"
    "${BRANCHOUT_PATH}/branchout" set "BRANCHOUT_MAVEN_REPOSITORY" "${BRANCHOUT_MAVEN_REPOSITORY}"
  fi
  if test -z "${BRANCHOUT_DOCKER_REGISTRY}"; then
    readValue "your docker registry" "BRANCHOUT_DOCKER_REGISTRY"
    "${BRANCHOUT_PATH}/branchout" set "BRANCHOUT_DOCKER_REGISTRY" "${BRANCHOUT_DOCKER_REGISTRY}"
  fi
  readValue "your artifact repository username" "REPOSITORY_USER"
  readSecret "your artifact repository secret" "REPOSITORY_API_KEY"

  mkdir -p "${BRANCHOUT_HOME}/maven/"
  echo "writing ${BRANCHOUT_HOME}/maven/settings.xml"
  if test -f "${PROJECTION_DIRECTORY}/branchout-templates/maven-settings.xml"; then
    echo <(cat "${PROJECTION_DIRECTORY}/branchout-templates/maven-settings.xml") > "${BRANCHOUT_HOME}/maven/settings.xml"
  else
    echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\"
    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">

  <localRepository>${BRANCHOUT_HOME}/maven/repository</localRepository>

  <servers>
    <server>
      <username>${REPOSITORY_USER}</username>
      <password>${REPOSITORY_API_KEY}</password>
      <id>branchout-maven</id>
    </server>
    <server>
      <username>${REPOSITORY_USER}</username>
      <password>${REPOSITORY_API_KEY}</password>
      <id>${BRANCHOUT_DOCKER_REGISTRY}</id>
    </server>
  </servers>

  <mirrors>
    <mirror>
      <mirrorOf>*</mirrorOf>
      <url>${BRANCHOUT_MAVEN_REPOSITORY}</url>
      <id>branchout-maven</id>
    </mirror>
  </mirrors>

  <pluginGroups>
    <pluginGroup>net.stickycode.plugins</pluginGroup>
  </pluginGroups>

</settings>
" > "${BRANCHOUT_HOME}/maven/settings.xml"
  fi
}

function mavenReactor() {
  MODULES=$(find . -name "pom.xml" -print | awk -v FS="(/|pom.xml)" '{print $2}')
  MODULE_XML=""
  NEWLINE=$'\n'
  TAB=$'\t'
  ensureValue "the Maven group" "GROUP"

  for module in $MODULES
  do
    MODULE_XML="${MODULE_XML}${NEWLINE}${TAB}<module>${module}</module>${NEWLINE}"
  done

  echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\"
    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">

  <groupId>${GROUP}</groupId>
  <artifactId>${PWD##*/}</artifactId>
  <version>0</version>
  <packaging>pom</packaging>

  <name>\${project.artifactId}</name>
  <modules>
  $MODULE_XML
  </modules>
</project>" > reactor.xml

  echo "Reactor generated"
}

function usage() {
  echo "branchout-maven settings|reactor|<alias>|<maven command>

  settings

      Generate the maven settings file

  reactor

      Generate the reactor.xml for the current directory

  alias

      cv     clean verify
      cvi    clean verify -Pwebapp-interactive

  maven command

      clean
      generate-resources
      process-resouces
      compile
      process-classes
      test
      prepare-package
      package
      integration-test
      verify

  "

  exit 1
}

function main() {
  test $# -gt 0 || usage

  BRANCHOUT_PATH="$(dirname "$0")"

  # shellcheck source=branchout-configuration
  . "${BRANCHOUT_PATH}/branchout-configuration"
  # shellcheck source=branchout-environment
  . "${BRANCHOUT_PATH}/branchout-environment"

  case "${1}" in
    version)
      echo "Branchout $BRANCHOUT_HOME with $(java -version 2>&1 | head -n 1) as $GIT_AUTHOR_EMAIL"
      runMaven --version
      ;;
    reactor)
      mavenReactor "${*}"
      ;;
    settings)
      mavenSettings "${*}"
      ;;
    show)
      sed -e 's,<password>.*</password>,<password>XXXXX</password>,g' "${BRANCHOUT_HOME}/maven/settings.xml"
      ;;
    *)
      test -f "${BRANCHOUT_HOME}/maven/settings.xml" || mavenSettings
      runMaven "${@}"
  esac
}

main "${@}"
